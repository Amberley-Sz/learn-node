- Explain the order of execution in terms of the event loop for eventloop/immediate.js.
- Will the order of execution change if timeout is changed to 0? Why or why not?

File read callback, including the 10ms blocking
Then the setTimeOut callback runs because it was scheduled to run immediately after the I/O callbacks,
but before any expired new timers get processed.
But this is dependent on the timing of the event loop phases and when the setTimeout is able to
schedule its callback relative to the setImmediate
The setTimeout runs and log the delay since it was scheduled


Since both setTimeout with 0 delay and setImmediate aim to execute as soon as current phase of the event loop
to compelete, and they are scheduled within an I/O callback,
the order of their execution might still favor setImmediate.
The execution order of these two may be influenced by subtle timing difference in how node.js peocesses the even loop
but typically setImmediate and setTimeout(0) scheduled within the same I/O cycle could run in an unpredictable order